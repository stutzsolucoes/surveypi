// Generated by CoffeeScript 1.7.1
(function() {
  var app, async, bodyParser, db, express, getQuestions, mongoskin, superagent;

  express = require('express');

  mongoskin = require('mongoskin');

  bodyParser = require('body-parser');

  superagent = require('superagent');

  async = require('async');

  app = express();

  app.use(bodyParser());

  db = mongoskin.db('mongodb://localhost:27017/stutz_survey_api', {
    safe: true
  });

  app.param('collectionName', function(req, res, next, collectionName) {
    req.collection = db.collection(collectionName);
    return next();
  });

  getQuestions = function(questionIds, questionsRetrieved) {
    return async.map(questionIds, function(questionId, callback) {
      return superagent.get('http://localhost:3000/survey_question/' + questionId).end(function(e, res) {
        if (e !== null) {
          return callback(e, null);
        }
        return callback(null, res.body);
      });
    }, function(err, results) {
      return questionsRetrieved(results);
    });
  };

  app.get('/opened_survey/:id', function(req, resGet, next) {
    return superagent.get('http://localhost:3000/survey/' + req.params.id).end(function(e, res) {
      var questionIds, survey;
      survey = res.body;
      questionIds = survey.questions;
      survey.questions = [];
      return getQuestions(questionIds, function(questionsReceived) {
        survey.questions = questionsReceived;
        return resGet.send(survey);
      });
    });
  });

  app.get('/', function(req, res) {
    res.status(503);
    return res.send('invalid request');
  });

  app.get('/:collectionName', function(req, res, next) {
    return req.collection.find({}, {
      limit: 10,
      sort: [['_id', -1]]
    }).toArray(function(e, results) {
      if (e) {
        return next(e);
      }
      return res.send(results);
    });
  });

  app.get('/:collectionName', function(req, res, next) {
    return req.collection.find(req.body, {
      limit: 100,
      sort: [['_id', -1]]
    }).toArray(function(e, results) {
      if (e) {
        return next(e);
      }
      return res.send(results);
    });
  });

  app.post('/:collectionName', function(req, res, next) {
    return req.collection.insert(req.body, function(e, results) {
      if (e) {
        return next(e);
      }
      return res.send(results);
    });
  });

  app.get('/:collectionName/:id', function(req, res, next) {
    return req.collection.findById(req.params.id, function(e, result) {
      if (e) {
        return next(e);
      }
      return res.send(result);
    });
  });

  app.put('/:collectionName/:id', function(req, res, next) {
    return req.collection.updateById(req.params.id, {
      $set: req.body
    }, function(e, result) {
      if (e) {
        return next(e);
      }
      return res.send(result === 1 ? {
        msg: 'success'
      } : {
        msg: 'error'
      });
    });
  });

  app.del('/:collectionName/:id', function(req, res, next) {
    return req.collection.removeById(req.params.id, function(e, result) {
      if (e) {
        return next(e);
      }
      return res.send(result === 1 ? {
        msg: 'success'
      } : {
        msg: 'error'
      });
    });
  });

  app.listen(3000);

  console.log('Listening on 3000');

}).call(this);
